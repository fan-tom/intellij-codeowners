Index: src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersLanguage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersLanguage.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersLanguage.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersLanguage.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersLanguage.kt	
@@ -1,14 +1,13 @@
 package com.github.fantom.codeowners.lang
 
-import com.github.fantom.codeowners.OwnersReference
 import com.github.fantom.codeowners.file.type.CodeownersFileType
-import com.github.fantom.codeowners.indexing.PatternString
 import com.github.fantom.codeowners.reference.CodeownersEntryReferenceSet
 import com.intellij.lang.Language
 import com.intellij.psi.FileViewProvider
 import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiElementVisitor
 import com.intellij.psi.PsiReference
+import com.intellij.psi.tree.IElementType
 import com.intellij.util.ProcessingContext
 
 /**
@@ -28,9 +27,11 @@
         val INSTANCE: CodeownersLanguage = CodeownersLanguage()
     }
 
-    fun createFile(viewProvider: FileViewProvider) = CodeownersFile(viewProvider, fileType)
+    open fun createFile(viewProvider: FileViewProvider) = CodeownersFile(viewProvider, fileType)
+    open val crlfToken: IElementType? = null
+    open fun createVisitor(delegate: CodeownersVisitor): PsiElementVisitor? = null
 
-    open fun getPatternsVisitor(items: MutableList<Pair<PatternString, OwnersReference>>): PsiElementVisitor? = null
+//    open fun getPatternsVisitor(items: MutableList<Pair<PatternString, OwnersReference>>): PsiElementVisitor? = null
     open fun getReferencesByElement(
         psiElement: PsiElement,
         processingContext: ProcessingContext
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/GithubLanguage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/GithubLanguage.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/GithubLanguage.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/GithubLanguage.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/GithubLanguage.kt	
@@ -1,19 +1,19 @@
 package com.github.fantom.codeowners.lang.kind.github
 
-import com.github.fantom.codeowners.OwnersReference
 import com.github.fantom.codeowners.file.type.kind.GithubFileType
-import com.github.fantom.codeowners.indexing.OwnerString
-import com.github.fantom.codeowners.indexing.PatternString
 import com.github.fantom.codeowners.lang.CodeownersLanguage
+import com.github.fantom.codeowners.lang.CodeownersVisitor
 import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersEntry
 import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersNamedOwner
 import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern
-import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersVisitor
+import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersTypes
 import com.github.fantom.codeowners.reference.CodeownersEntryReferenceSet
 import com.github.fantom.codeowners.reference.CodeownersGithubOwnerReference
 import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiReference
+import com.intellij.psi.tree.IElementType
 import com.intellij.util.ProcessingContext
+import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersVisitor as GithubVisitor
 
 class GithubLanguage : CodeownersLanguage("Github", ".github") {
     companion object {
@@ -23,18 +23,32 @@
     override val fileType
         get() = GithubFileType.INSTANCE
 
-    override fun getPatternsVisitor(items: MutableList<Pair<PatternString, OwnersReference>>) =
-        object : CodeownersVisitor() {
-            override fun visitPattern(entry: CodeownersPattern) {
-                val regex = entry.entryFile.regex(false)
-                items.add(
-                    Pair(
-                        PatternString(regex),
-                        OwnersReference(entry.owners.ownerList.map { OwnerString(it.text) }, entry.textOffset)
-                    )
-                )
-            }
+    /**
+     * don't turn it into field, since value is of type
+     * [com.github.fantom.codeowners.lang.kind.github.psi.CodeownersTokenType] which requires [INSTANCE]
+     * for it's construction, which will initialize this field, so circular initialization
+     */
+    override val crlfToken: IElementType
+        get() = CodeownersTypes.CRLF
+
+    override fun createVisitor(delegate: CodeownersVisitor) =
+        object : GithubVisitor() {
+            override fun visitPattern(pattern: CodeownersPattern) = delegate.visitPattern(pattern)
+            override fun visitEntry(entry: CodeownersEntry) = delegate.visitEntry(entry)
         }
+
+//    override fun getPatternsVisitor(items: MutableList<Pair<PatternString, OwnersReference>>) =
+//        object : GithubVisitor() {
+//            override fun visitPattern(entry: CodeownersPattern) {
+//                val regex = entry.entryFile.regex(false)
+//                items.add(
+//                    Pair(
+//                        PatternString(regex),
+//                        OwnersReference(entry.owners.ownerList.map { OwnerString(it.text) }, entry.textOffset)
+//                    )
+//                )
+//            }
+//        }
 
     override fun getReferencesByElement(psiElement: PsiElement, processingContext: ProcessingContext): Array<out PsiReference>? =
         when (psiElement) {
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketLanguage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketLanguage.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketLanguage.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketLanguage.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketLanguage.kt	
@@ -1,12 +1,15 @@
 package com.github.fantom.codeowners.lang.kind.bitbucket
 
-import com.github.fantom.codeowners.OwnersReference
 import com.github.fantom.codeowners.file.type.kind.BitbucketFileType
-import com.github.fantom.codeowners.indexing.OwnerString
-import com.github.fantom.codeowners.indexing.PatternString
 import com.github.fantom.codeowners.lang.CodeownersLanguage
+import com.github.fantom.codeowners.lang.CodeownersVisitor
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersEntry
 import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersPattern
-import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersVisitor
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersTypes
+import com.github.fantom.codeowners.lang.kind.github.GithubLanguage.Companion.INSTANCE
+import com.intellij.psi.FileViewProvider
+import com.intellij.psi.tree.IElementType
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersVisitor as BitbucketVisitor
 
 class BitbucketLanguage : CodeownersLanguage("Bitbucket", ".bitbucket") {
     companion object {
@@ -16,16 +19,35 @@
     override val fileType
         get() = BitbucketFileType.INSTANCE
 
-    override fun getPatternsVisitor(items: MutableList<Pair<PatternString, OwnersReference>>) =
-        object : CodeownersVisitor() {
-            override fun visitPattern(entry: CodeownersPattern) {
-                val regex = entry.entry.regex(false)
-                items.add(
-                    Pair(
-                        PatternString(regex),
-                        OwnersReference(entry.owners.map { OwnerString(it.text) }, entry.textOffset)
-                    )
-                )
-            }
+    /**
+     * don't turn it into field, since value is of type
+     * [com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersTokenType] which requires [INSTANCE]
+     * for it's construction, which will initialize this field, so circular initialization
+     */
+    override val crlfToken: IElementType
+        get() = CodeownersTypes.CRLF
+
+    //    override fun isMyLanguage(file: VirtualFile): Boolean {
+//        file.fileType is CodeownersFileType && file.parent.
+//    }
+    override fun createFile(viewProvider: FileViewProvider) = BitbucketFile(viewProvider)
+
+    override fun createVisitor(delegate: CodeownersVisitor) =
+        object : BitbucketVisitor() {
+            override fun visitPattern(pattern: CodeownersPattern) = delegate.visitPattern(pattern)
+            override fun visitEntry(entry: CodeownersEntry) = delegate.visitEntry(entry)
         }
+
+//    override fun getPatternsVisitor(items: MutableList<Pair<PatternString, OwnersReference>>) =
+//        object : BitbucketVisitor() {
+//            override fun visitPattern(entry: CodeownersPattern) {
+//                val regex = entry.entry.regex(false)
+//                items.add(
+//                    Pair(
+//                        PatternString(regex),
+//                        OwnersReference(entry.owners.map { OwnerString(it.text) }, entry.textOffset)
+//                    )
+//                )
+//            }
+//        }
 }
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	
+++ b/build.gradle.kts	
@@ -32,6 +32,7 @@
 repositories {
     mavenCentral()
 }
+
 dependencies {
     detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.18.1")
     implementation(kotlin("stdlib-jdk8"))
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersPatternExtImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersPatternExtImpl.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersPatternExtImpl.kt
deleted file mode 100644
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersPatternExtImpl.kt	
+++ /dev/null	
@@ -1,16 +0,0 @@
-package com.github.fantom.codeowners.lang.kind.bitbucket.psi.impl
-
-import com.github.fantom.codeowners.lang.kind.bitbucket.psi.*
-import com.intellij.lang.ASTNode
-
-/**
- * Custom [CodeownersElementImpl] implementation.
- */
-abstract class CodeownersPatternExtImpl(node: ASTNode) : CodeownersElementImpl(node), CodeownersPattern {
-    override val entry: CodeownersEntry
-        // either assign or entry is available
-        get() = assign?.entry ?: reset?.entry!!
-    override val owners: List<CodeownersOwner>
-        // reset matches path and assigns empty owners list
-        get() = assign?.owners?.ownerList ?: emptyList()
-}
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersPatternBase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersPatternBase.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersPatternBase.kt
deleted file mode 100644
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersPatternBase.kt	
+++ /dev/null	
@@ -1,11 +0,0 @@
-package com.github.fantom.codeowners.lang.kind.bitbucket.psi
-
-import com.intellij.psi.PsiElement
-
-interface CodeownersPatternBase : PsiElement {
-    /**
-     * Returns fs path.
-     */
-    val entry: CodeownersEntry
-    val owners: List<CodeownersOwner>
-}
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketFile.kt
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketFile.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketFile.kt
new file mode 100644
--- /dev/null	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/BitbucketFile.kt	
@@ -0,0 +1,9 @@
+package com.github.fantom.codeowners.lang.kind.bitbucket
+
+import com.github.fantom.codeowners.file.type.kind.BitbucketFileType
+import com.github.fantom.codeowners.lang.CodeownersFile
+import com.intellij.psi.FileViewProvider
+
+class BitbucketFile(viewProvider: FileViewProvider) : CodeownersFile(viewProvider, BitbucketFileType.INSTANCE) {
+    val isSubdirectoryOverridesEnabled = true
+}
Index: src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersFile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersFile.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersFile.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersFile.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersFile.kt	
@@ -3,6 +3,7 @@
 import com.github.fantom.codeowners.CodeownersException
 import com.github.fantom.codeowners.OwnersReference
 import com.github.fantom.codeowners.file.type.CodeownersFileType
+import com.github.fantom.codeowners.indexing.OwnerString
 import com.github.fantom.codeowners.indexing.PatternString
 import com.intellij.lang.Language
 import com.intellij.lang.LanguageParserDefinitions
@@ -10,7 +11,7 @@
 import com.intellij.psi.PsiElementVisitor
 import com.intellij.psi.impl.source.PsiFileImpl
 
-class CodeownersFile(viewProvider: FileViewProvider, private val fileType: CodeownersFileType) : PsiFileImpl(viewProvider) {
+open class CodeownersFile(viewProvider: FileViewProvider, private val fileType: CodeownersFileType) : PsiFileImpl(viewProvider) {
 
     private val language = findLanguage(fileType.language, viewProvider) as CodeownersLanguage
 
@@ -47,7 +48,20 @@
 
     fun getPatternsList(): List<Pair<PatternString, OwnersReference>> {
         val items = mutableListOf<Pair<PatternString, OwnersReference>>()
-        language.getPatternsVisitor(items)?.let { acceptChildren(it) }
+//        language.getPatternsVisitor(items)?.let { acceptChildren(it) }
+        language.createVisitor(
+            object : CodeownersVisitor() {
+                override fun visitPattern(pattern: CodeownersPatternBase) {
+                    val regex = pattern.entry.regex(false)
+                    items.add(
+                        Pair(
+                            PatternString(regex),
+                            OwnersReference(pattern.ownersList.map { OwnerString(it) }, pattern.textOffset)
+                        )
+                    )
+                }
+            }
+        )?.let { acceptChildren(it) }
         return items
     }
 }
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersBitbucketPatternExtImpl.kt
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersBitbucketPatternExtImpl.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersBitbucketPatternExtImpl.kt
new file mode 100644
--- /dev/null	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/impl/CodeownersBitbucketPatternExtImpl.kt	
@@ -0,0 +1,21 @@
+package com.github.fantom.codeowners.lang.kind.bitbucket.psi.impl
+
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersElementImpl
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersEntry
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersOwner
+import com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersPattern
+import com.intellij.lang.ASTNode
+
+/**
+ * Custom [CodeownersElementImpl] implementation.
+ */
+abstract class CodeownersBitbucketPatternExtImpl(node: ASTNode) : CodeownersElementImpl(node), CodeownersPattern {
+    override val entry: CodeownersEntry
+        // either assign or entry is available
+        get() = assign?.entry ?: reset?.entry!!
+    override val owners: List<CodeownersOwner>
+        // reset matches path and assigns empty owners list
+        get() = assign?.owners?.ownerList ?: emptyList()
+    override val ownersList: Collection<String>
+        get() = owners.map { it.text }
+}
Index: src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersUnusedEntryInspection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersUnusedEntryInspection.kt b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersUnusedEntryInspection.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersUnusedEntryInspection.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersUnusedEntryInspection.kt	
@@ -1,7 +1,7 @@
 package com.github.fantom.codeowners.codeInspection
 
 import com.github.fantom.codeowners.CodeownersBundle
-import com.github.fantom.codeowners.lang.CodeownersFile
+import com.github.fantom.codeowners.lang.*
 import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersEntry
 import com.github.fantom.codeowners.services.CodeownersMatcher
 import com.github.fantom.codeowners.util.MatcherUtil
@@ -17,12 +17,152 @@
 import com.intellij.psi.PsiElementVisitor
 import com.intellij.psi.PsiPolyVariantReference
 import com.intellij.psi.impl.source.resolve.reference.impl.providers.FileReferenceOwner
+import ru.nsk.kstatemachine.createStateMachine
 
 /**
  * Inspection tool that checks if entries are unused - does not cover any file or directory.
  */
 class CodeownersUnusedEntryInspection : LocalInspectionTool() {
 
+//    inner class CodeownersVisitorInner(private val holder: ProblemsHolder, private val isOnTheFly: Boolean) : PsiElementVisitor() {
+//        val matcher = holder.project.service<CodeownersMatcher>()
+//
+//        fun visitPattern(pattern: CodeownersPatternBase) {
+//            val entry = pattern.entry
+//            val references = entry.references
+//            var resolved = true
+//            var previous = Int.MAX_VALUE
+//
+//            references.forEach { reference ->
+//                ProgressManager.checkCanceled()
+//                if (reference is FileReferenceOwner) {
+//                    val fileReference = reference as PsiPolyVariantReference
+//                    val result = fileReference.multiResolve(false)
+//                    resolved = result.isNotEmpty() || previous > 0 && reference.getCanonicalText().endsWith("/*")
+//                    previous = result.size
+//                }
+//                if (!resolved) {
+//                    return@forEach
+//                }
+//            }
+//            if (!resolved && !isEntryExcluded(entry, holder.project)) {
+//                (entry.parent.parent as CodeownersFile)
+//                    .containingDirectory
+//                    ?.virtualFile
+//                    ?.findFileByRelativePath(entry.text)
+//                    ?: holder.registerProblem(
+//                        entry,
+//                        CodeownersBundle.message("codeInspection.unusedEntry.message"),
+//                        CodeownersRemoveEntryFix(pattern)
+//                    )
+//            }
+////            super.visitEntry(entry)
+//        }
+//
+//        /**
+//         * Checks if given [CodeownersEntry] is excluded in the current [Project].
+//         *
+//         * @param entry   Codeowners entry
+//         * @param project current project
+//         * @return entry is excluded in current project
+//         */
+//        @Suppress("ReturnCount")
+//        private fun isEntryExcluded(entry: CodeownersEntryBase, project: Project): Boolean {
+//            val pattern = entry.pattern() ?: return false
+//            val moduleRoot = Utils.getModuleRootForFile(entry.containingFile.virtualFile, project) ?: return false
+//            val files = MatcherUtil.getFilesForPattern(project, pattern)
+//
+//            getExcludedRoots(project).forEach { root ->
+//                files.forEach files@{ file ->
+//                    ProgressManager.checkCanceled()
+//                    if (!isUnder(file, root)) {
+//                        return@files
+//                    }
+//                    val path = Utils.getRelativePath(moduleRoot, root)
+//                    if (matcher.match(pattern, path)) {
+//                        return false
+//                    }
+//                }
+//            }
+//
+//            return false
+//        }
+//    }
+
+    /**
+     * Checks if given [CodeownersEntry] is excluded in the current [Project].
+     *
+     * @param entry   Codeowners entry
+     * @param project current project
+     * @return entry is excluded in current project
+     */
+    @Suppress("ReturnCount")
+    private fun isEntryExcluded(entry: CodeownersEntryBase, project: Project, matcher: CodeownersMatcher): Boolean {
+        val pattern = entry.pattern() ?: return false
+        val moduleRoot = Utils.getModuleRootForFile(entry.containingFile.virtualFile, project) ?: return false
+        val files = MatcherUtil.getFilesForPattern(project, pattern)
+
+        getExcludedRoots(project).forEach { root ->
+            files.forEach files@{ file ->
+                ProgressManager.checkCanceled()
+                if (!isUnder(file, root)) {
+                    return@files
+                }
+                val path = Utils.getRelativePath(moduleRoot, root)
+                if (matcher.match(pattern, path)) {
+                    return false
+                }
+            }
+        }
+
+        return false
+    }
+
+//    override fun checkFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
+//        if (file !is CodeownersFile) {
+//            return null
+//        }
+//        val lang = file.language
+//        val holder = ProblemsHolder(manager, file, isOnTheFly)
+//        val matcher = holder.project.service<CodeownersMatcher>()
+//        file.acceptChildren(
+//            lang.createVisitor(
+//                object : CodeownersVisitor() {
+//                    override fun visitPattern(pattern: CodeownersPatternBase) {
+//                        val entry = pattern.entry
+//                        val references = entry.references
+//                        var resolved = true
+//                        var previous = Int.MAX_VALUE
+//
+//                        references.forEach { reference ->
+//                            ProgressManager.checkCanceled()
+//                            if (reference is FileReferenceOwner) {
+//                                val fileReference = reference as PsiPolyVariantReference
+//                                val result = fileReference.multiResolve(false)
+//                                resolved = result.isNotEmpty() || previous > 0 && reference.getCanonicalText().endsWith("/*")
+//                                previous = result.size
+//                            }
+//                            if (!resolved) {
+//                                return@forEach
+//                            }
+//                        }
+//                        if (!resolved && !isEntryExcluded(entry, holder.project, matcher)) {
+//                            file.containingDirectory
+//                                ?.virtualFile
+//                                ?.findFileByRelativePath(entry.text)
+//                                ?: holder.registerProblem(
+//                                    entry,
+//                                    CodeownersBundle.message("codeInspection.unusedEntry.message"),
+//                                    CodeownersRemoveEntryFix(pattern)
+//                                )
+//                        }
+//                    }
+//                }
+//            )!!
+//        )
+//        return holder.resultsArray
+//    }
+
     /**
      * Checks if entries are related to any file.
      *
@@ -31,70 +171,106 @@
      * @return not-null visitor for this inspection
      */
     override fun buildVisitor(holder: ProblemsHolder, isOnTheFly: Boolean): PsiElementVisitor {
+//        return CodeownersVisitor(holder, isOnTheFly)
         val matcher = holder.project.service<CodeownersMatcher>()
 
-        return object : com.github.fantom.codeowners.lang.kind.github.psi.CodeownersVisitor() {
-            override fun visitPattern(pattern: com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern) {
-                val entry = pattern.entryFile
-                val references = entry.references
-                var resolved = true
-                var previous = Int.MAX_VALUE
+        val file = holder.file
+        return (file.language as? CodeownersLanguage)?.createVisitor(
+            object : CodeownersVisitor() {
+                override fun visitPattern(pattern: CodeownersPatternBase) {
+                    val entry = pattern.entry
+                    val references = entry.references
+                    var resolved = true
+                    var previous = Int.MAX_VALUE
 
-                references.forEach { reference ->
-                    ProgressManager.checkCanceled()
-                    if (reference is FileReferenceOwner) {
-                        val fileReference = reference as PsiPolyVariantReference
-                        val result = fileReference.multiResolve(false)
-                        resolved = result.isNotEmpty() || previous > 0 && reference.getCanonicalText().endsWith("/*")
-                        previous = result.size
-                    }
-                    if (!resolved) {
-                        return@forEach
-                    }
-                }
-                if (!resolved && !isEntryExcluded(entry, holder.project)) {
-                    (entry.parent.parent as CodeownersFile)
-                        .containingDirectory
-                        ?.virtualFile
-                        ?.findFileByRelativePath(entry.text)
-                        ?: holder.registerProblem(
-                            entry,
-                            CodeownersBundle.message("codeInspection.unusedEntry.message"),
-                            CodeownersRemoveEntryFix(pattern)
-                        )
-                }
-                super.visitEntry(entry)
-            }
-
-            /**
-             * Checks if given [CodeownersEntry] is excluded in the current [Project].
-             *
-             * @param entry   Codeowners entry
-             * @param project current project
-             * @return entry is excluded in current project
-             */
-            @Suppress("ReturnCount")
-            private fun isEntryExcluded(entry: CodeownersEntry, project: Project): Boolean {
-                val pattern = entry.pattern() ?: return false
-                val moduleRoot = Utils.getModuleRootForFile(entry.containingFile.virtualFile, project) ?: return false
-                val files = MatcherUtil.getFilesForPattern(project, pattern)
-
-                getExcludedRoots(project).forEach { root ->
-                    files.forEach files@{ file ->
-                        ProgressManager.checkCanceled()
-                        if (!isUnder(file, root)) {
-                            return@files
-                        }
-                        val path = Utils.getRelativePath(moduleRoot, root)
-                        if (matcher.match(pattern, path)) {
-                            return false
-                        }
-                    }
-                }
+                    references.forEach { reference ->
+                        ProgressManager.checkCanceled()
+                        if (reference is FileReferenceOwner) {
+                            val fileReference = reference as PsiPolyVariantReference
+                            val result = fileReference.multiResolve(false)
+                            resolved = result.isNotEmpty() || previous > 0 && reference.getCanonicalText().endsWith("/*")
+                            previous = result.size
+                        }
+                        if (!resolved) {
+                            return@forEach
+                        }
+                    }
+                    if (!resolved && !isEntryExcluded(entry, holder.project, matcher)) {
+                        file.containingDirectory
+                            ?.virtualFile
+                            ?.findFileByRelativePath(entry.text)
+                            ?: holder.registerProblem(
+                                entry,
+                                CodeownersBundle.message("codeInspection.unusedEntry.message"),
+                                CodeownersRemoveEntryFix(pattern)
+                            )
+                    }
+                }
+            }
+        ) ?: PsiElementVisitor.EMPTY_VISITOR
 
-                return false
-            }
-        }
+//        return object : com.github.fantom.codeowners.lang.kind.github.psi.CodeownersVisitor() {
+//            override fun visitPattern(pattern: com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern) {
+//                val entry = pattern.entryFile
+//                val references = entry.references
+//                var resolved = true
+//                var previous = Int.MAX_VALUE
+//
+//                references.forEach { reference ->
+//                    ProgressManager.checkCanceled()
+//                    if (reference is FileReferenceOwner) {
+//                        val fileReference = reference as PsiPolyVariantReference
+//                        val result = fileReference.multiResolve(false)
+//                        resolved = result.isNotEmpty() || previous > 0 && reference.getCanonicalText().endsWith("/*")
+//                        previous = result.size
+//                    }
+//                    if (!resolved) {
+//                        return@forEach
+//                    }
+//                }
+//                if (!resolved && !isEntryExcluded(entry, holder.project)) {
+//                    (entry.parent.parent as CodeownersFile)
+//                        .containingDirectory
+//                        ?.virtualFile
+//                        ?.findFileByRelativePath(entry.text)
+//                        ?: holder.registerProblem(
+//                            entry,
+//                            CodeownersBundle.message("codeInspection.unusedEntry.message"),
+//                            CodeownersRemoveEntryFix(pattern)
+//                        )
+//                }
+//                super.visitEntry(entry)
+//            }
+//
+//            /**
+//             * Checks if given [CodeownersEntry] is excluded in the current [Project].
+//             *
+//             * @param entry   Codeowners entry
+//             * @param project current project
+//             * @return entry is excluded in current project
+//             */
+//            @Suppress("ReturnCount")
+//            private fun isEntryExcluded(entry: CodeownersEntry, project: Project): Boolean {
+//                val pattern = entry.pattern() ?: return false
+//                val moduleRoot = Utils.getModuleRootForFile(entry.containingFile.virtualFile, project) ?: return false
+//                val files = MatcherUtil.getFilesForPattern(project, pattern)
+//
+//                getExcludedRoots(project).forEach { root ->
+//                    files.forEach files@{ file ->
+//                        ProgressManager.checkCanceled()
+//                        if (!isUnder(file, root)) {
+//                            return@files
+//                        }
+//                        val path = Utils.getRelativePath(moduleRoot, root)
+//                        if (matcher.match(pattern, path)) {
+//                            return false
+//                        }
+//                    }
+//                }
+//
+//                return false
+//            }
+//        }
     }
 
     /**
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	
+++ b/gradle/wrapper/gradle-wrapper.properties	
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.1.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
Index: src/main/grammars/github/Codeowners.bnf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/grammars/github/Codeowners.bnf b/src/main/grammars/github/Codeowners.bnf
--- a/src/main/grammars/github/Codeowners.bnf	
+++ b/src/main/grammars/github/Codeowners.bnf	
@@ -32,6 +32,9 @@
   mixin("Entry")            = "com.github.fantom.codeowners.lang.kind.github.psi.impl.CodeownersEntryExtImpl"
   mixin("NamedOwner")       = "com.github.fantom.codeowners.lang.kind.github.psi.impl.CodeownersNamedOwnerExtImpl"
   implements("Entry")       = "com.github.fantom.codeowners.lang.CodeownersEntryBase"
+
+  mixin("Pattern")          = "com.github.fantom.codeowners.lang.kind.github.psi.impl.CodeownersPatternExtImpl"
+  implements("Pattern")     = "com.github.fantom.codeowners.lang.CodeownersPatternBase"
 }
 
 codeownersFile          ::= item_ *
Index: src/main/grammars/bitbucket/Codeowners.bnf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/grammars/bitbucket/Codeowners.bnf b/src/main/grammars/bitbucket/Codeowners.bnf
--- a/src/main/grammars/bitbucket/Codeowners.bnf	
+++ b/src/main/grammars/bitbucket/Codeowners.bnf	
@@ -35,8 +35,8 @@
   name("Entry.*")           = "entry"
   implements("Entry")       = "com.github.fantom.codeowners.lang.CodeownersEntryBase"
   mixin("Entry")            = "com.github.fantom.codeowners.lang.kind.bitbucket.psi.impl.CodeownersEntryExtImpl"
-  implements("Pattern")     = "com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersPatternBase"
-  mixin("Pattern")          = "com.github.fantom.codeowners.lang.kind.bitbucket.psi.impl.CodeownersPatternExtImpl"
+  implements("Pattern")     = "com.github.fantom.codeowners.lang.kind.bitbucket.psi.CodeownersBitbucketPatternBase"
+  mixin("Pattern")          = "com.github.fantom.codeowners.lang.kind.bitbucket.psi.impl.CodeownersBitbucketPatternExtImpl"
   mixin("NamedOwner")       = "com.github.fantom.codeowners.lang.kind.bitbucket.psi.impl.CodeownersNamedOwnerExtImpl"
 }
 
Index: src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersVisitor.kt
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersVisitor.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersVisitor.kt
new file mode 100644
--- /dev/null	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersVisitor.kt	
@@ -0,0 +1,6 @@
+package com.github.fantom.codeowners.lang
+
+open class CodeownersVisitor {
+    open fun visitPattern(pattern: CodeownersPatternBase) = Unit
+    open fun visitEntry(entry: CodeownersEntryBase) = Unit
+}
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/CodeownersParserDefinition.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/CodeownersParserDefinition.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/CodeownersParserDefinition.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/CodeownersParserDefinition.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/CodeownersParserDefinition.kt	
@@ -29,11 +29,13 @@
 
     override fun getFileNodeType() = FILE
 
-    override fun createFile(viewProvider: FileViewProvider) = when (viewProvider.baseLanguage) {
-        is CodeownersLanguage -> (viewProvider.baseLanguage as CodeownersLanguage).createFile(viewProvider)
-        else -> {
-            LOGGER.trace("Creating generic codeowners file")
-            CodeownersFile(viewProvider, CodeownersFileType.INSTANCE)
+    override fun createFile(viewProvider: FileViewProvider): CodeownersFile {
+        return when (val lang = viewProvider.baseLanguage) {
+            is CodeownersLanguage -> lang.createFile(viewProvider)
+            else -> {
+                LOGGER.trace("Creating generic codeowners file")
+                CodeownersFile(viewProvider, CodeownersFileType.INSTANCE)
+            }
         }
     }
 
Index: src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersGroupingRule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersGroupingRule.kt b/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersGroupingRule.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersGroupingRule.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersGroupingRule.kt	
@@ -4,13 +4,18 @@
 import com.github.fantom.codeowners.CodeownersManager
 import com.github.fantom.codeowners.OwnersSet
 import com.intellij.injected.editor.VirtualFileWindow
-import com.intellij.openapi.components.*
+import com.intellij.openapi.components.service
 import com.intellij.openapi.project.DumbAware
 import com.intellij.openapi.project.Project
 import com.intellij.openapi.vfs.VirtualFile
-import com.intellij.usages.*
+import com.intellij.usages.Usage
+import com.intellij.usages.UsageGroup
+import com.intellij.usages.UsageTarget
+import com.intellij.usages.UsageView
 import com.intellij.usages.impl.rules.UsageGroupBase
-import com.intellij.usages.rules.*
+import com.intellij.usages.rules.SingleParentUsageGroupingRule
+import com.intellij.usages.rules.UsageGroupingRuleEx
+import com.intellij.usages.rules.UsageInFile
 import javax.swing.Icon
 
 class CodeownersGroupingRule(project: Project) :
@@ -34,6 +39,12 @@
     }
 
     private data class CodeownersGroup(private val owners: OwnersSet) : UsageGroupBase(1) {
+        // overridden for backward compatibility
+        @Suppress("UnstableApiUsage")
+        override fun getText(view: UsageView?): String {
+            return presentableGroupText
+        }
+
         override fun getIcon(): Icon {
             return CodeownersIcons.FILE
         }
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	
+++ b/gradle.properties	
@@ -3,15 +3,15 @@
 
 pluginGroup = com.github.fantom.codeowners
 pluginName = CODEOWNERS
-pluginVersion = 0.3.0
+pluginVersion = 0.3.1
 pluginSinceBuild = 212
 pluginUntilBuild = 213.*
 # Plugin Verifier integration -> https://github.com/JetBrains/gradle-intellij-plugin#plugin-verifier-dsl
 # See https://jb.gg/intellij-platform-builds-list for available build versions
-pluginVerifierIdeVersions = 2021.2
+pluginVerifierIdeVersions = 2021.2.2
 
 platformType = IC
-platformVersion = 2021.2
+platformVersion = 2021.2.2
 platformDownloadSources = true
 # Plugin Dependencies -> https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html
 # Example: platformPlugins = com.intellij.java, com.jetbrains.php:203.4449.22
Index: src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersUsageGroupingRuleProviderImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersUsageGroupingRuleProviderImpl.kt b/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersUsageGroupingRuleProviderImpl.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersUsageGroupingRuleProviderImpl.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/grouping/usage/CodeownersUsageGroupingRuleProviderImpl.kt	
@@ -1,5 +1,6 @@
 package com.github.fantom.codeowners.grouping.usage
 
+import com.github.fantom.codeowners.grouping.usage.CodeownersUsageGroupingRuleProviderImpl.UsageGroupingRuleWrapper
 import com.intellij.openapi.actionSystem.AnAction
 import com.intellij.openapi.extensions.Extensions
 import com.intellij.openapi.project.Project
@@ -49,6 +50,7 @@
          * correctly handles this method, we are not, and default impl just throws [UnsupportedOperationException]
          */
         override fun groupUsage(usage: Usage): UsageGroup? {
+            @Suppress("DEPRECATION")
             return rule.groupUsage(usage)
         }
     }
@@ -66,6 +68,10 @@
             ).toTypedArray()
     }
 
+    override fun getActiveRules(project: Project): Array<UsageGroupingRule> {
+        return super.getActiveRules(project)
+    }
+
     override fun getActiveRules(
         project: Project,
         usageViewSettings: UsageViewSettings,
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/psi/impl/CodeownersPatternExtImpl.kt
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/psi/impl/CodeownersPatternExtImpl.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/psi/impl/CodeownersPatternExtImpl.kt
new file mode 100644
--- /dev/null	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/psi/impl/CodeownersPatternExtImpl.kt	
@@ -0,0 +1,15 @@
+package com.github.fantom.codeowners.lang.kind.github.psi.impl
+
+import com.github.fantom.codeowners.lang.CodeownersEntryBase
+import com.github.fantom.codeowners.lang.kind.github.psi.*
+import com.intellij.lang.ASTNode
+
+/**
+ * Custom [CodeownersElementImpl] implementation.
+ */
+abstract class CodeownersPatternExtImpl(node: ASTNode) : CodeownersElementImpl(node), CodeownersPattern {
+    override val entry: CodeownersEntryBase
+        get() = this.entryFile
+    override val ownersList: Collection<String>
+        get() = this.owners.ownerList.map { it.text }
+}
Index: src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersCoverEntryInspection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersCoverEntryInspection.kt b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersCoverEntryInspection.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersCoverEntryInspection.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersCoverEntryInspection.kt	
@@ -3,7 +3,7 @@
 import com.github.fantom.codeowners.CodeownersBundle
 import com.github.fantom.codeowners.lang.CodeownersEntryBase
 import com.github.fantom.codeowners.lang.CodeownersFile
-import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersEntry
+import com.github.fantom.codeowners.lang.CodeownersPatternBase
 import com.github.fantom.codeowners.services.CodeownersMatcher
 import com.github.fantom.codeowners.util.Constants
 import com.github.fantom.codeowners.util.Glob
@@ -41,52 +41,53 @@
         val contextDirectory = virtualFile.parent ?: return null
         val problemsHolder = ProblemsHolder(manager, file, isOnTheFly)
 
-        val owned = mutableSetOf<String>()
+//        val owned = mutableSetOf<String>()
 //        val unignored = mutableSetOf<String>()
-        val result = mutableListOf<Pair<com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern,
-                com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern>>()
-        val map = mutableMapOf<com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern, Set<String>>()
+        val result = mutableListOf<Pair<CodeownersPatternBase,
+                CodeownersPatternBase>>()
+        val patternToFilePaths = mutableMapOf<CodeownersPatternBase, Set<String>>()
 
         val patterns = file
-            .findChildrenByClass(com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern::class.java)
+            .findChildrenByClass(CodeownersPatternBase::class.java)
         val matcher = file.project.service<CodeownersMatcher>()
-        val matchedMap = getPathsSet(contextDirectory, patterns.map { it.entryFile }, matcher)
+        val entryToFilePaths = getPathsSet(contextDirectory, patterns.map { it.entry }, matcher)
 
         patterns.forEach entries@{ pattern ->
             ProgressManager.checkCanceled()
-            val matched = matchedMap[pattern.entryFile] ?: return@entries
+            val matched = entryToFilePaths[pattern.entry] ?: return@entries
 //            val intersection: Collection<String>
 
-            owned.addAll(matched)
+//            owned.addAll(matched)
 //            intersection = unignored.intersect(matched)
 
 //            if (unignored.removeAll(intersection)) {
 //                return@entries
 //            }
 
-            map.keys.forEach recent@{ recent ->
+            patternToFilePaths.keys.forEach recent@{ visitedPattern ->
                 ProgressManager.checkCanceled()
-                val recentValues = map[recent] ?: return@recent
-                if (recentValues.isEmpty() || matched.isEmpty()) {
+                val visitedPaths = patternToFilePaths[visitedPattern] ?: return@recent
+                if (visitedPaths.isEmpty() || matched.isEmpty()) {
                     return@recent
                 }
-//                if (entry.isNegated == recent.isNegated) {
-                if (recentValues.containsAll(matched)) {
-                    result.add(Pair.create(recent, pattern))
-                } else if (matched.containsAll(recentValues)) {
-                    result.add(Pair.create(pattern, recent))
+//                if (entry.isNegated == visitedPattern.isNegated) {
+//                if (visitedPaths.containsAll(matched)) {
+//                    result.add(Pair.create(visitedPattern, pattern))
+//                } else
+                if (matched.containsAll(visitedPaths)) { // later entry covers all paths of earlier entry
+                    result.add(Pair.create(pattern, visitedPattern))
                 }
 //                } else if (intersection.containsAll(recentValues)) {
-//                    result.add(Pair.create(entry, recent))
+//                    result.add(Pair.create(entry, visitedPattern))
 //                }
             }
-            map[pattern] = matched
+            patternToFilePaths[pattern] = matched
         }
 
         result.forEach { pair ->
             problemsHolder.registerProblem(
                 pair.second,
-                message(pair.first.entryFile, virtualFile, isOnTheFly),
+                message(pair.first.entry, virtualFile, isOnTheFly),
                 CodeownersRemoveEntryFix(pair.second)
             )
         }
@@ -95,7 +96,7 @@
     }
 
     /**
-     * Returns the paths list for the given [CodeownersEntry] array in [VirtualFile] context.
+     * Returns the paths list for the given [CodeownersEntryBase] array in [VirtualFile] context.
      * Stores fetched data in [.cacheMap] to limit the queries to the files tree.
      *
      * @param contextDirectory current context
@@ -104,7 +105,7 @@
      */
     private fun getPathsSet(
         contextDirectory: VirtualFile,
-        entries: List<com.github.fantom.codeowners.lang.kind.github.psi.CodeownersEntry>,
+        entries: List<CodeownersEntryBase>,
         matcher: CodeownersMatcher
     ) =
         mutableMapOf<CodeownersEntryBase, Set<String>>().apply {
@@ -127,7 +128,7 @@
      * @return generated message [String]
      */
     private fun message(
-        coveringEntry: com.github.fantom.codeowners.lang.kind.github.psi.CodeownersEntry,
+        coveringEntry: CodeownersEntryBase,
         virtualFile: VirtualFile,
         onTheFly: Boolean
     ): String {
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/CodeownersParserDefinition.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/CodeownersParserDefinition.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/CodeownersParserDefinition.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/CodeownersParserDefinition.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/github/CodeownersParserDefinition.kt	
@@ -28,8 +28,8 @@
 
     override fun getFileNodeType() = FILE
 
-    override fun createFile(viewProvider: FileViewProvider) = when (viewProvider.baseLanguage) {
-        is CodeownersLanguage -> (viewProvider.baseLanguage as CodeownersLanguage).createFile(viewProvider)
+    override fun createFile(viewProvider: FileViewProvider) = when (val lang = viewProvider.baseLanguage) {
+        is CodeownersLanguage -> lang.createFile(viewProvider)
         else -> CodeownersFile(viewProvider, CodeownersFileType.INSTANCE)
     }
 
Index: src/main/kotlin/com/github/fantom/codeowners/indexing/CodeownersEntryOccurrence.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/indexing/CodeownersEntryOccurrence.kt b/src/main/kotlin/com/github/fantom/codeowners/indexing/CodeownersEntryOccurrence.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/indexing/CodeownersEntryOccurrence.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/indexing/CodeownersEntryOccurrence.kt	
@@ -10,11 +10,13 @@
 import java.io.IOException
 import java.io.Serializable
 
-inline class PatternString(val pattern: String) {
+@JvmInline
+value class PatternString(val pattern: String) {
     override fun toString() = pattern
 }
 
-inline class OwnerString(val owner: String) {
+@JvmInline
+value class OwnerString(val owner: String) {
     override fun toString() = owner
 }
 
Index: src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersIncorrectEntryInspection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersIncorrectEntryInspection.kt b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersIncorrectEntryInspection.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersIncorrectEntryInspection.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersIncorrectEntryInspection.kt	
@@ -1,8 +1,14 @@
 package com.github.fantom.codeowners.codeInspection
 
 import com.github.fantom.codeowners.CodeownersBundle
+import com.github.fantom.codeowners.lang.CodeownersEntryBase
+import com.github.fantom.codeowners.lang.CodeownersFile
+import com.github.fantom.codeowners.lang.CodeownersVisitor
+import com.intellij.codeInspection.InspectionManager
 import com.intellij.codeInspection.LocalInspectionTool
+import com.intellij.codeInspection.ProblemDescriptor
 import com.intellij.codeInspection.ProblemsHolder
+import com.intellij.psi.PsiFile
 import java.util.regex.Pattern
 import java.util.regex.PatternSyntaxException
 
@@ -10,19 +16,30 @@
  * Inspection tool that checks if entry has correct form in specific according to the specific [ ].
  */
 class CodeownersIncorrectEntryInspection : LocalInspectionTool() {
-    override fun buildVisitor(holder: ProblemsHolder, isOnTheFly: Boolean) =
-        object : com.github.fantom.codeowners.lang.kind.github.psi.CodeownersVisitor() {
-            override fun visitEntry(entry: com.github.fantom.codeowners.lang.kind.github.psi.CodeownersEntry) {
-                val regex = entry.regex(false)
+    override fun checkFile(file: PsiFile, manager: InspectionManager, isOnTheFly: Boolean): Array<ProblemDescriptor>? {
+        if (file !is CodeownersFile) {
+            return null
+        }
+        val lang = file.language
+        val holder = ProblemsHolder(manager, file, isOnTheFly)
+        file.acceptChildren(
+            lang.createVisitor(
+                object : CodeownersVisitor() {
+                    override fun visitEntry(entry: CodeownersEntryBase) {
+                        val regex = entry.regex(false)
 
-                try {
-                    Pattern.compile(regex)
-                } catch (e: PatternSyntaxException) {
-                    holder.registerProblem(
-                        entry,
-                        CodeownersBundle.message("codeInspection.incorrectEntry.message", e.description)
-                    )
-                }
-            }
-        }
+                        try {
+                            Pattern.compile(regex)
+                        } catch (e: PatternSyntaxException) {
+                            holder.registerProblem(
+                                entry,
+                                CodeownersBundle.message("codeInspection.incorrectEntry.message", e.description)
+                            )
+                        }
+                    }
+                }
+            )!!
+        )
+        return holder.resultsArray
+    }
 }
Index: src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersRemoveEntryFix.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersRemoveEntryFix.kt b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersRemoveEntryFix.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersRemoveEntryFix.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/codeInspection/CodeownersRemoveEntryFix.kt	
@@ -1,19 +1,21 @@
 package com.github.fantom.codeowners.codeInspection
 
 import com.github.fantom.codeowners.CodeownersBundle
-import com.github.fantom.codeowners.lang.kind.github.psi.CodeownersPattern
+import com.github.fantom.codeowners.lang.CodeownersLanguage
+import com.github.fantom.codeowners.lang.CodeownersPatternBase
 import com.intellij.codeInspection.LocalQuickFixAndIntentionActionOnPsiElement
 import com.intellij.openapi.editor.Editor
 import com.intellij.openapi.project.Project
 import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiFile
 import com.intellij.psi.impl.source.tree.TreeUtil
+import com.intellij.psi.tree.IElementType
 
 /**
  * QuickFix action that removes specified entry handled by code inspections like [CodeownersCoverEntryInspection],
  * [CodeownersDuplicateEntryInspection], [CodeownersUnusedEntryInspection].
  */
-class CodeownersRemoveEntryFix(pattern: CodeownersPattern) : LocalQuickFixAndIntentionActionOnPsiElement(pattern) {
+class CodeownersRemoveEntryFix(pattern: CodeownersPatternBase) : LocalQuickFixAndIntentionActionOnPsiElement(pattern) {
 
     override fun invoke(
         project: Project,
@@ -22,21 +24,22 @@
         startElement: PsiElement,
         endElement: PsiElement
     ) {
-        if (startElement is CodeownersPattern) {
-            removeCrlf(startElement)
+        val crlf = (file.language as CodeownersLanguage).crlfToken!!
+        if (startElement is CodeownersPatternBase) {
+            removeCrlf(startElement, crlf)
             startElement.delete()
         }
     }
 
-    private fun removeCrlf(startElement: PsiElement) {
+    private fun removeCrlf(startElement: PsiElement, crlf: IElementType) {
         (
             TreeUtil.findSibling(
                 startElement.node,
-                com.github.fantom.codeowners.lang.kind.github.psi.CodeownersTypes.CRLF
+                crlf
             )
                 ?: TreeUtil.findSiblingBackward(
                     startElement.node,
-                    com.github.fantom.codeowners.lang.kind.github.psi.CodeownersTypes.CRLF
+                    crlf
                 )
             )?.psi?.delete()
     }
Index: src/main/resources/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
--- a/src/main/resources/META-INF/plugin.xml	
+++ b/src/main/resources/META-INF/plugin.xml	
@@ -81,13 +81,13 @@
                 language="Bitbucket"
                 implementationClass="com.github.fantom.codeowners.daemon.CodeownersDirectoryMarkerProvider"/>
 
-<!--        <localInspection-->
-<!--                bundle="messages.CodeownersBundle"-->
-<!--                enabledByDefault="true"-->
-<!--                groupKey="codeInspection.group"-->
-<!--                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersCoverEntryInspection"-->
-<!--                key="codeInspection.coverEntry"-->
-<!--                level="WARNING"/>-->
+        <localInspection
+                bundle="messages.CodeownersBundle"
+                enabledByDefault="true"
+                groupKey="codeInspection.group"
+                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersCoverEntryInspection"
+                key="codeInspection.coverEntry"
+                level="WARNING"/>
 <!--        <localInspection-->
 <!--                bundle="messages.CodeownersBundle"-->
 <!--                enabledByDefault="true"-->
@@ -95,13 +95,13 @@
 <!--                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersDuplicateEntryInspection"-->
 <!--                key="codeInspection.duplicateEntry"-->
 <!--                level="ERROR"/>-->
-<!--        <localInspection-->
-<!--                bundle="messages.CodeownersBundle"-->
-<!--                enabledByDefault="true"-->
-<!--                groupKey="codeInspection.group"-->
-<!--                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersUnusedEntryInspection"-->
-<!--                key="codeInspection.unusedEntry"-->
-<!--                level="WEAK WARNING"/>-->
+        <localInspection
+                bundle="messages.CodeownersBundle"
+                enabledByDefault="true"
+                groupKey="codeInspection.group"
+                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersUnusedEntryInspection"
+                key="codeInspection.unusedEntry"
+                level="WEAK WARNING"/>
 <!--        <localInspection-->
 <!--                bundle="messages.CodeownersBundle"-->
 <!--                enabledByDefault="true"-->
@@ -109,13 +109,13 @@
 <!--                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersRelativeEntryInspection"-->
 <!--                key="codeInspection.relativeEntry"-->
 <!--                level="ERROR"/>-->
-<!--        <localInspection-->
-<!--                bundle="messages.CodeownersBundle"-->
-<!--                enabledByDefault="true"-->
-<!--                groupKey="codeInspection.group"-->
-<!--                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersIncorrectEntryInspection"-->
-<!--                key="codeInspection.incorrectEntry"-->
-<!--                level="ERROR"/>-->
+        <localInspection
+                bundle="messages.CodeownersBundle"
+                enabledByDefault="true"
+                groupKey="codeInspection.group"
+                implementationClass="com.github.fantom.codeowners.codeInspection.CodeownersIncorrectEntryInspection"
+                key="codeInspection.incorrectEntry"
+                level="ERROR"/>
 
         <vcsConfigurableProvider
                 implementation="com.github.fantom.codeowners.settings.CodeownersSettingsConfigurable"/>
Index: src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersPatternBase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersPatternBase.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersPatternBase.kt
--- a/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersPatternBase.kt	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/CodeownersPatternBase.kt	
@@ -1,29 +1,8 @@
 package com.github.fantom.codeowners.lang
-//
-// import com.intellij.psi.PsiElement
-// import java.util.regex.Pattern
-//
-// interface CodeownersEntryBase : PsiElement {
-//    /**
-//     * Returns current value.
-//     *
-//     * @return value
-//     */
-//    val value: String
-//
-//    val isDirectory: Boolean
-//
-//    /**
-//     * Returns current pattern.
-//     *
-//     * @return pattern
-//     */
-//    fun regex(acceptChildren: Boolean = false): String
-//
-//    /**
-//     * Returns current pattern.
-//     *
-//     * @return pattern
-//     */
-//    fun pattern(acceptChildren: Boolean = false): Pattern?
-// }
+
+import com.intellij.psi.PsiElement
+
+interface CodeownersPatternBase : PsiElement {
+    val entry: CodeownersEntryBase
+    val ownersList: Collection<String>
+}
Index: src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersBitbucketPatternBase.kt
===================================================================
diff --git a/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersBitbucketPatternBase.kt b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersBitbucketPatternBase.kt
new file mode 100644
--- /dev/null	
+++ b/src/main/kotlin/com/github/fantom/codeowners/lang/kind/bitbucket/psi/CodeownersBitbucketPatternBase.kt	
@@ -0,0 +1,7 @@
+package com.github.fantom.codeowners.lang.kind.bitbucket.psi
+
+import com.github.fantom.codeowners.lang.CodeownersPatternBase
+
+interface CodeownersBitbucketPatternBase : CodeownersPatternBase {
+    val owners: List<CodeownersOwner>
+}
